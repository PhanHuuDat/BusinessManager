@page "/books/create"
@page "/books/update/{id:int}"
@inject IUnitOfWork UnitOfWork

<h3>UpsertBook</h3>

<MudGrid>
    @if (isLoading)
    {
        <MudItem>
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            </MudPaper>
        </MudItem>
    }
    else
    {
        <MudItem xs="8">
            <MudPaper Class="mud-width-full py-4">
                <EditForm Model="Book" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Title" @bind-Value="Book!.Title" For="@(() => Book!.Title)" />
                    <MudSelect T="int?" Required="true" @bind-Value="Book.AuthorId"
                           Label="Author" AnchorOrigin="Origin.BottomCenter" For="@(() =>Book!.AuthorId)">
                        @foreach (var author in authors)
                        {
                            <MudSelectItem Value="@author.Id">@author.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="int?" Required="true" @bind-Value="Book.BookSizeId"
                           Label="Book Size" AnchorOrigin="Origin.BottomCenter" For="@(() =>Book!.BookSizeId)">
                        @foreach (var bookSize in bookSizes)
                        {
                            <MudSelectItem Value="@bookSize.Id">@bookSize.SizeValue</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="BookTagDTO" Clearable="true" Required="true" @bind-Value="value" @bind-SelectedValues="Book.BookTags" 
                           MultiSelection="true" Label="Book Tags" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var bookTag in bookTags)
                        {
                            <MudSelectItem Value="@bookTag"/>
                        }
                    </MudSelect>
                </EditForm>
            </MudPaper>
        </MudItem>

        <MudItem xs="4">
            <MudPaper Class="mud-width-full  py-4">
                <MudImage Src="@Book.Avatar" Class="mud-width-full" />
            </MudPaper>
        </MudItem>
    }

</MudGrid>

@code {
    [Parameter]
    public int Id { get; set; }
    private bool isLoading = false;
    private BookDTO Book { get; set; } = new()
        {
            Avatar = "/images/default.jpg"
        };
    private BookTagDTO value { get; set; }

    private IEnumerable<AuthorDTO> authors = Enumerable.Empty<AuthorDTO>();
    private IEnumerable<BookSizeDTO> bookSizes = Enumerable.Empty<BookSizeDTO>();
    private IEnumerable<BookTagDTO> bookTags = Enumerable.Empty<BookTagDTO>();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            authors = await UnitOfWork.Author.GetAllAsync();
            bookSizes = await UnitOfWork.BookSize.GetAllAsync();
            bookTags = await UnitOfWork.BookTag.GetAllAsync();
            isLoading = false;
            StateHasChanged();
        }

    }

    public void OnValidSubmit()
    {

    }

}
